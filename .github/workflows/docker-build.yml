name: Build Docker image

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  build:
    name: Build and scan Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      packages: write
      security-events: write
    env:
      GHCR_IMAGE: ghcr.io/${{ github.repository }}/nginx

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract short SHA
        id: meta
        run: |
          short=${GITHUB_SHA::7}
          echo "short=${short}" >> "$GITHUB_OUTPUT"
          echo "image=${GHCR_IMAGE}:${short}" >> "$GITHUB_OUTPUT"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          file: docker/Dockerfile
          tags: ${{ steps.meta.outputs.image }}
          push: true
          load: true

      - name: Scan image with Trivy
        id: trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ steps.meta.outputs.image }}
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: 0
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results
        if: always() && steps.trivy.outcome != 'skipped'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Count HIGH/CRITICAL vulnerabilities
        id: trivy_count
        run: |
          count=$(jq '[.runs[].results[]?] | length' trivy-results.sarif)
          echo "count=$count" >> "$GITHUB_OUTPUT"

      - name: Prepare Trivy comment body
        if: steps.trivy_count.outputs.count != '0'
        run: |
          jq -r '
            [ .runs[].results[]? ]
            | .[0:10]
            | .[]
            | "- " + (.ruleId // "unknown") + " (" + (.properties."security-severity" // .level // "unknown") + "): " + (.message.text // "No description")
          ' trivy-results.sarif > trivy-comment.txt

          count=${{ steps.trivy_count.outputs.count }}
          if [ "$count" -gt 10 ]; then
            extra=$(( count - 10 ))
            echo "- ...and ${extra} more findings" >> trivy-comment.txt
          fi

      - name: Comment on PR with Trivy findings
        if: github.event_name == 'pull_request' && steps.trivy_count.outputs.count != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const count = parseInt(process.env.TRIVY_FINDING_COUNT, 10);
            const summary = fs.readFileSync('trivy-comment.txt', 'utf8');
            const bodyLines = [
              '### Trivy scan results',
              '',
              `:warning: Found **${count}** HIGH/CRITICAL vulnerabilities in \`${process.env.TRIVY_IMAGE_REF}\``,
              '',
              summary.trim(),
              '',
              'See the Code scanning tab for the full SARIF report.'
            ];
            const body = bodyLines.join('\n');

            const existing = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 100
            });

            const previous = existing.data.find(comment => comment.user?.login === 'github-actions[bot]' && comment.body.startsWith('### Trivy scan results'));

            if (previous) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: previous.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
        env:
          TRIVY_FINDING_COUNT: ${{ steps.trivy_count.outputs.count }}
          TRIVY_IMAGE_REF: ${{ steps.meta.outputs.image }}
